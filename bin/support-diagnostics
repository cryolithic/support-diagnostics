#!/usr/bin/env python3

import sys
from os.path import dirname, basename, isfile, join

if sys.path[0] != "/usr/bin":
    ## Development mode from git repository
    sys.path.insert(0, sys.path[0] + "/../")

import support_diagnostics
import support_diagnostics.output

# System header
info = "{script} version: {version}".format(script=__file__.split('/')[-1],version=support_diagnostics.Version.version)
print(support_diagnostics.Colors.format("{header}{padding}".format(header=info,padding=" " * (support_diagnostics.output.ReportOutput.columns - len(info))), support_diagnostics.Colors.BLACK_FOREGROUND, support_diagnostics.Colors.GREY_BACKGROUND))
print()

support_diagnostics.Update.check()

if support_diagnostics.Configuration.platform is None:
    print("Cannot determine platform")
    sys.exit(1)

support_diagnostics.ImportModules.import_all(globals(), "collectors")
support_diagnostics.ImportModules.import_all(globals(), "analyzers")

def main():
    """
    main()
    """
    collectors_cache = {}
    collector_results_cache = {}
    analyzer_results = {}
    analyzer_classes = [cls for cls in support_diagnostics.Analyzer.__subclasses__()]
    analyzer_classes.sort(key=lambda cls: cls.order)
    print("Collecting & analyzing...", end='', flush=True)
    for analyzer_class in analyzer_classes:
        # Only process if 'all' is categories list or specific category matches what's in analyzer's list.
        if "all" in Configuration.get_settings()['categories'] or len(list(set(Configuration.get_settings()['categories']) & set(analyzer_class.categories))) > 0 :
            # Build collector results.
            # Multiple analyzers can call the same collector, so cache results instead of calling
            # collector over and over again.
            # collector results are a flag list of Collector results that the anaylzer can parse the source to determine what to do.
            collector_results = []

            # Collector can be as simple as a class name or as complex as a list of dictionaries.
            collectors = analyzer_class.collector
            if type(collectors) is not list:
                collectors = [collectors]

            for collector in collectors:
                collector_class = None
                collector_id = None
                collector_arguments = None
                if type(collector) is dict:
                    if 'collector' in collector:
                        collector_class = collector['collector']
                    if 'arguments' in collector:
                        collector_arguments = collector['arguments']
                        if 'id' in collector_arguments:
                            collector_id = collector_arguments['id']

                if collector_class is None:
                    collector_class = collector
                if collector_id is None:
                    collector_id = collector_class().id

                collector_cache_id = "{class_name}_{id}".format(class_name=collector_class.__name__,id=collector_id)

                if collector_class is not None and collector_cache_id not in collector_results_cache:
                    # Instantiate collector, collect, cache results
                    print(".", end='', flush=True)
                    if collector_arguments is not None:
                        collector = collector_class(**collector_arguments)
                    else:
                        collector = collector_class()
                    collector_results_cache[collector_cache_id] = collector.collect()

                # Build collector results for this analyzer
                collector_results.extend(collector_results_cache[collector_cache_id])

            if analyzer_class not in analyzer_results:
                print(".", end='', flush=True)
                analyzer = analyzer_class()
                analyzer_results[analyzer_class] = analyzer.analyze(collector_results)
    print("completed")
            

    # Generate report
    outputs = [cls for cls in support_diagnostics.output.Output.__subclasses__() if cls.__name__.lower().startswith(support_diagnostics.Configuration.settings['output']) ]
    report = outputs[0]()
    report.generate(analyzer_results)

main()
